//
// Generated file, do not edit! Created by nedtool 5.4 from statePacket.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __STATEPACKET_M_H
#define __STATEPACKET_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>statePacket.msg:16</tt> by nedtool.
 * <pre>
 * packet StatePacket
 * {
 *     string targetNode;
 *     string sourceNodes[];
 *     double nodeUtilizations[];
 * }
 * </pre>
 */
class StatePacket : public ::omnetpp::cPacket
{
  protected:
    ::omnetpp::opp_string targetNode;
    ::omnetpp::opp_string *sourceNodes; // array ptr
    unsigned int sourceNodes_arraysize;
    double *nodeUtilizations; // array ptr
    unsigned int nodeUtilizations_arraysize;

  private:
    void copy(const StatePacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const StatePacket&);

  public:
    StatePacket(const char *name=nullptr, short kind=0);
    StatePacket(const StatePacket& other);
    virtual ~StatePacket();
    StatePacket& operator=(const StatePacket& other);
    virtual StatePacket *dup() const override {return new StatePacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getTargetNode() const;
    virtual void setTargetNode(const char * targetNode);
    virtual void setSourceNodesArraySize(unsigned int size);
    virtual unsigned int getSourceNodesArraySize() const;
    virtual const char * getSourceNodes(unsigned int k) const;
    virtual void setSourceNodes(unsigned int k, const char * sourceNodes);
    virtual void setNodeUtilizationsArraySize(unsigned int size);
    virtual unsigned int getNodeUtilizationsArraySize() const;
    virtual double getNodeUtilizations(unsigned int k) const;
    virtual void setNodeUtilizations(unsigned int k, double nodeUtilizations);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const StatePacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, StatePacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef __STATEPACKET_M_H

